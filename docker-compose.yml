version: '3'

services:
  image-unicorn-cim-mcgill-ca:
    profiles: [unicorn]
    image: nginx:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.image-unicorn.rule=Host(`unicorn.cim.mcgill.ca`) && PathPrefix(`/image`)"
      - "traefik.http.routers.image-unicorn.tls.certresolver=myresolver"
      - "traefik.http.middlewares.image-unicorn.stripprefix.prefixes=/image"
      - "traefik.http.routers.image-unicorn.middlewares=image-unicorn@docker"
      - traefik.docker.network=traefik
    environment:
      - SERVER_NAME=unicorn.cim.mcgill.ca
    volumes:
      - ./auditory-haptic-graphics-website/html:/var/www/html:ro
      - ./auditory-haptic-graphics-website/image.conf:/etc/nginx/templates/image.conf.template:ro
      - ./auditory-haptic-graphics-website/passwords:/etc/nginx/passwords
      - ./resources/current:/var/www/resources:ro
      - website-logs:/var/log/nginx
    depends_on:
      - orchestrator
    networks:
      - traefik
      - default

  image-pegasus-cim-mcgill-ca:
    profiles: [pegasus]
    image: nginx:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.atp-pegasus.rule=Host(`pegasus.cim.mcgill.ca`) && PathPrefix(`/image`)"
      - "traefik.http.routers.atp-pegasus.tls.certresolver=myresolver"
      - "traefik.http.middlewares.peg-redirect.redirectregex.regex=^(https?)://pegasus.cim.mcgill.ca/image(/?.*)"
      - "traefik.http.middlewares.peg-redirect.redirectregex.replacement=$${1}://image.a11y.mcgill.ca$${2}"
      - "traefik.http.middlewares.peg-redirect.redirectregex.permanent=true"
      - "traefik.http.routers.atp-pegasus.middlewares=peg-redirect@docker"

      - "traefik.http.routers.image.rule=Host(`image.a11y.mcgill.ca`) || Host(`image.ally.mcgill.ca`) || Host(`image.accessibility.mcgill.ca`)"
      - "traefik.http.middlewares.ally-redirect.redirectregex.regex=^(https?)://image.(ally|accessibility).mcgill.ca(/?.*)"
      - "traefik.http.middlewares.ally-redirect.redirectregex.replacement=$${1}://image.a11y.mcgill.ca$${3}"
      - "traefik.http.middlewares.ally-redirect.redirectregex.permanent=true"
      - "traefik.http.routers.image.middlewares=ally-redirect@docker"
      - "traefik.http.routers.image.tls.certresolver=myresolver"
      - traefik.docker.network=traefik
    environment:
      - SERVER_NAME=image.a11y.mcgill.ca
    volumes:
      - ./www/html:/var/www/html:ro
      - ./www/image.conf:/etc/nginx/templates/image.conf.template:ro
      - website-logs:/var/log/nginx
      - ./www/passwords:/etc/nginx/passwords
      - ./resources/current:/var/www/resources:ro
    depends_on:
      - orchestrator
    networks:
      - traefik
      - default

  goaccess:
    profiles: [unicorn, pegasus]
    container_name: image-goaccess
    image: allinurl/goaccess:1.6.1
    restart: unless-stopped
    command: /srv/logs/image-a11y-mcgill-ca-access.log --log-format=COMBINED --date-format='%d/%b/%Y' --time-format='%T' --no-global-config --real-time-html -o /srv/report/report.html --persist --restore
    volumes:
      - website-logs:/srv/logs:ro
      - ./goaccess_report:/srv/report

# start - common services
  orchestrator:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-orchestrator:${REGISTRY_TAG}
    restart: unless-stopped
    environment:
      - PARALLEL_PREPROCESSORS=ON
      - STORE_IMAGE_DATA=ON
    env_file:
      - ./config/express-common.env
    group_add:
      # This should be set in an environment variable or .env
      - ${DOCKER_GID}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - user-logs:/var/log/IMAGE

  espnet-tts:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-service-espnet-tts:${REGISTRY_TAG}
    restart: unless-stopped
    environment:
      - TORCH_DEVICE=cuda
    ports:
      - "8001:80"
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            capabilities: ["gpu", "utility", "compute"]

  espnet-tts-fr:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-service-espnet-tts-fr:${REGISTRY_TAG}
    restart: unless-stopped
    environment:
      - TORCH_DEVICE=cuda
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: ["gpu", "compute", "utility"]

  multilang-support:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-service-translation:${REGISTRY_TAG}
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: ["gpu", "compute", "utility"]

  autour-preprocessor:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-autour:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/maps.env
    labels:
      ca.mcgill.a11y.image.preprocessor: 1
      ca.mcgill.a11y.image.port: 5000

  content-categoriser:
      profiles: [pegasus, unicorn, default]
      image: ghcr.io/shared-reality-lab/image-preprocessor-content-categoriser:${REGISTRY_TAG}
      restart: unless-stopped
      labels:
        ca.mcgill.a11y.image.preprocessor: 1
        ca.mcgill.a11y.image.port: 5000
      deploy:
        resources:
          limits:
            memory: 2g

  graphic-tagger:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-graphic-tagger:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/azure-api.env
    labels:
      ca.mcgill.a11y.image.preprocessor: 2
      ca.mcgill.a11y.image.port: 5000

  object-detection:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-object-detection-v8:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
      ca.mcgill.a11y.image.preprocessor: 3
      ca.mcgill.a11y.image.port: 5000
    deploy:
          resources:
            reservations:
              devices:
              - driver: nvidia
                device_ids: ['1']
                capabilities: ["gpu", "utility", "compute"]

  object-grouping:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-grouping:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
      ca.mcgill.a11y.image.preprocessor: 4
      ca.mcgill.a11y.image.port: 5000

  openstreetmap:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-openstreetmap:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/maps.env
    labels:
      ca.mcgill.a11y.image.preprocessor: 3
      ca.mcgill.a11y.image.port: 5000

  object-sorting:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-sorting:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
      ca.mcgill.a11y.image.preprocessor: 5
      ca.mcgill.a11y.image.port: 5000

  semantic-segmentation:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-mmsemantic-segmentation:${REGISTRY_TAG}
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            device_ids: ['1']
            capabilities: ["gpu", "utility", "compute"]
    labels:
      ca.mcgill.a11y.image.preprocessor: 3
      ca.mcgill.a11y.image.port: 5000

  supercollider:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-service-supercollider:${REGISTRY_TAG}
    command: sclang -D ./loader.scd
    restart: unless-stopped
    volumes:
      - sc-store:/tmp/sc-store
    deploy:
        replicas: 2

  photo-audio-handler:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-photo-audio:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/express-common.env
    labels:
      ca.mcgill.a11y.image.handler: enable
    volumes:
      - sc-store:/tmp/sc-store

  autour-handler:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-autour:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/express-common.env
    labels:
      ca.mcgill.a11y.image.handler: enable
    volumes:
      - sc-store:/tmp/sc-store

  photo-audio-haptics-handler:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-photo-audio-haptics:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/express-common.env
    labels:
      ca.mcgill.a11y.image.handler: enable
    volumes:
      - sc-store:/tmp/sc-store

  high-charts-handler:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-high-charts:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/express-common.env
    labels:
      ca.mcgill.a11y.image.handler: enable
    volumes:
      - sc-store:/tmp/sc-store

  svg-od-handler:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-svg-od:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
        ca.mcgill.a11y.image.handler: enable

  svg-semantic-seg-handler:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-svg-semantic-seg:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
        ca.mcgill.a11y.image.handler: enable

  depth-map-generator:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-depth-map-generator:${REGISTRY_TAG}
    restart: unless-stopped
    deploy:
        resources:
          reservations:
             devices:
             - driver: nvidia
               device_ids: ['1']
               capabilities: ["gpu", "utility", "compute"]
    labels:
        ca.mcgill.a11y.image.preprocessor: 3
        ca.mcgill.a11y.image.port: 5000

  svg-depth-map:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-svg-depth-map:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
        ca.mcgill.a11y.image.handler: enable

  nominatim-preprocessor:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-nominatim:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
        - ./config/express-common.env
    labels:
        ca.mcgill.a11y.image.preprocessor: 2

  photo-tactile-svg-handler:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-photo-tactile-svg:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
        ca.mcgill.a11y.image.handler: enable

  map-tactile-svg-handler:
    profiles: [pegasus, unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-map-tactile-svg:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
        ca.mcgill.a11y.image.handler: enable

# end - common services

# start - unicorn exclusive services

  motd-handler:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-motd:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/express-common.env
    environment:
      - MOTD=Hello, world!
    labels:
      ca.mcgill.a11y.image.handler: enable

  hello-haptics-handler:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-hello-haptics:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/express-common.env
    labels:
      ca.mcgill.a11y.image.handler: enable

  ocr-clouds-preprocessor:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-ocr-clouds:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
      - ./config/apis-and-selection.env
    labels:
      ca.mcgill.a11y.image.preprocessor: 4
      ca.mcgill.a11y.image.port: 5000

  object-depth-calculator:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-object-depth-calculator:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
      ca.mcgill.a11y.image.preprocessor: 4
      ca.mcgill.a11y.image.port: 5000

  action-recognition:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-action-recognition:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
        ca.mcgill.a11y.image.preprocessor: 4
        ca.mcgill.a11y.image.port: 5000
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            device_ids: ['1']
            capabilities: ["gpu", "utility", "compute"]

  ocr-handler:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-ocr:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
      ca.mcgill.a11y.image.handler: enable

  osm-streets-handler:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-osm-streets:${REGISTRY_TAG}
    restart: unless-stopped
    env_file:
        - ./config/express-common.env
    depends_on:
        - supercollider
        - espnet-tts
    labels:
        ca.mcgill.a11y.image.handler: enable
    volumes:
        - sc-store:/tmp/sc-store

  svg-open-street-map-handler:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-svg-open-street-map:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
        ca.mcgill.a11y.image.handler: enable
        ca.mcgill.a11y.image.port: 5000

  collage-detector-preprocessor:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-preprocessor-collage-detector:${REGISTRY_TAG}
    restart: unless-stopped
    labels:
        ca.mcgill.a11y.image.preprocessor: 1
        ca.mcgill.a11y.image.port: 5000

  svg-action-recognition-handler:
    profiles: [unicorn, default]
    image: ghcr.io/shared-reality-lab/image-handler-svg-action-recognition:${REGISTRY_TAG}
    labels:
        ca.mcgill.a11y.image.handler: enable

# end - unicorn exclusive services        
volumes:
  sc-store:
  user-logs:
  website-logs:
# https://docs.docker.com/compose/networking/
networks:
  traefik:
    external: true
    name: traefik
  default:
    name: image