version: "3"

services:
    orchestrator:
        build:
            context: .
            dockerfile: ./orchestrator/Dockerfile
        image: "orchestrator:latest"
        env_file:
            - ./config/express-common.env
        group_add:
            # This should be set in an environment variable or .env
            - ${DOCKER_GID}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
    supercollider:
        build:
            context: ./services/supercollider-images/supercollider-service
            dockerfile: Dockerfile
        image: "supercollider-service:latest"
        command: sclang -D ./loader.scd
        volumes:
            - sc-store:/tmp/sc-store
    espnet-tts:
        build:
            context: .
            dockerfile: services/espnet-tts/Dockerfile
        image: "espnet-tts:latest"
        environment:
            - TORCH_DEVICE=cuda
        deploy:
            resources:
                reservations:
                    devices:
                    - driver: nvidia
                      capabilities: ["gpu", "utility", "compute"]
    hello-preprocessor:
        build:
            context: .
            dockerfile: ./preprocessors/hello-preprocessor/Dockerfile
        image: "hello-preprocessor:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.preprocessor: 1
            ca.mcgill.a11y.image.port: 8080
    autour-preprocessor:
        build:
            context: .
            dockerfile: ./preprocessors/autour/Dockerfile
        image: "autour:latest"
        env_file:
            - ./config/maps.env
        labels:
            ca.mcgill.a11y.image.preprocessor: 2
            ca.mcgill.a11y.image.port: 5000
    ocr-preprocessor:
        build:
            context: .
            dockerfile: ./preprocessors/ocr/Dockerfile
        image: "ocr:latest"
        env_file:
            - ./config/azure-api.env
        labels:
            ca.mcgill.a11y.image.preprocessor: 2
            ca.mcgill.a11y.image.port: 5000
    hello-handler:
        build:
            context: .
            dockerfile: ./handlers/hello-handler/Dockerfile
        image: "hello-handler:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.handler: enable
    object-detection:
        build:
            context: .
            dockerfile: ./preprocessors/yolo/Dockerfile
        image: "object-detection:latest"
        labels:
            ca.mcgill.a11y.image.preprocessor: 3
            ca.mcgill.a11y.image.port: 5000
        # deploy:
        #     resources:
        #         reservations:
        #             devices:
        #             - driver: nvidia
        #               capabilities: ["gpu", "utility", "compute"]
    first-categoriser:
        build:
            context: .
            dockerfile: ./preprocessors/categoriser/Dockerfile
        image: "first-categoriser:latest"
        labels:
            ca.mcgill.a11y.image.preprocessor: 1
            ca.mcgill.a11y.image.port: 5000
    second-categoriser:
        build:
            context: .
            dockerfile: ./preprocessors/categoriser2/Dockerfile
        image: "second-categoriser:latest"
        labels:
            ca.mcgill.a11y.image.preprocessor: 2
            ca.mcgill.a11y.image.port: 5000
        env_file:
            - ./config/azure-api.env
    object-grouping:
        build:
            context: .
            dockerfile: ./preprocessors/grouping/Dockerfile
        image: "object-grouping:latest"
        labels:
            ca.mcgill.a11y.image.preprocessor: 4
            ca.mcgill.a11y.image.port: 5000
    object-sorting:
        build:
            context: .
            dockerfile: ./preprocessors/sorting/Dockerfile
        image: "object-sorting:latest"
        labels:
            ca.mcgill.a11y.image.preprocessor: 5
            ca.mcgill.a11y.image.port: 5000
    scene-detection:
        build:
            context: .
            dockerfile: ./preprocessors/scene/Dockerfile
        image: "scene-detection:latest"
        labels:
            ca.mcgill.a11y.image.preprocessor: 3
            ca.mcgill.a11y.image.port: 5000
    semantic-segmentation:
        build:
            context: .
            dockerfile: ./preprocessors/semanticSeg/./Dockerfile
        image: "semantic-segmentation:latest"
        labels:
            ca.mcgill.a11y.image.preprocessor: 3
            ca.mcgill.a11y.image.port: 5000
        deploy:
            resources:
                reservations:
                    devices:
                    - driver: nvidia
                      capabilities: ["gpu", "utility", "compute"]
    chart-pipeline:
        build:
            context: .
            dockerfile: ./preprocessors/chart-pipeline/Dockerfile
        image: "chart-pipeline:latest"
        command: --mode=1 --empty_cache=True
        labels:
            ca.mcgill.a11y.image.preprocessor: 2
            ca.mcgill.a11y.image.port: 5000
        # deploy:
        #     resources:
        #         reservations:
        #             devices:
        #             - driver: nvidia
        #               device_ids: ['0']
        #               capabilities: ["gpu", "utility", "compute"]
        env_file:
            - ./config/chart.env
    hello-tts-handler:
        build:
            context: .
            dockerfile: ./handlers/hello-tts-handler/Dockerfile
        image: "hello-tts-handler:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.handler: enable
        volumes:
            - sc-store:/tmp/sc-store
    generic-tts-handler:
        build:
            context: .
            dockerfile: ./handlers/generic-tts-handler/Dockerfile
        image: "generic-tts-handler:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.handler: enable
        volumes:
            - sc-store:/tmp/sc-store
    semantic-segmentation-handler:
        build:
            context: .
            dockerfile: ./handlers/segment-handler/Dockerfile
        image: "segmentation-handler:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.handler: enable
        volumes:
            - sc-store:/tmp/sc-store
    pie-chart-handler:
        build:
            context: .
            dockerfile: ./handlers/pie-chart-handler/Dockerfile
        image: "pie-chart-handler:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.handler: enable
        volumes:
            - sc-store:/tmp/sc-store
    object-text-handler:
        build:
            context: .
            dockerfile: ./handlers/object-text-handler/Dockerfile
        image: "object-text-handler:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.handler: enable
    autour-handler:
        build:
            context: .
            dockerfile: ./handlers/autour-handler/Dockerfile
        image: "autour-handler:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.handler: enable
        volumes:
            - sc-store:/tmp/sc-store

    photo-audio-handler:
        build:
            context: .
            dockerfile: ./handlers/photo-audio-handler/Dockerfile
        image: "photo-audio-handler:latest"
        env_file:
            - ./config/express-common.env
        labels:
            ca.mcgill.a11y.image.handler: enable
        volumes:
            - sc-store:/tmp/sc-store

volumes:
    sc-store:
