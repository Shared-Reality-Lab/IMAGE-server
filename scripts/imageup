#!/bin/bash -x

# Resets IMAGE docker stack completely.
# Use this to get yourself out of trouble if you're testing and mess anything up.
# On a test server, can run every night via cron to make sure latest is pulled and server is in a known state.
# Removes any docker-compose overrides and pulls images from scratch so that
# what is running reflects what is merged into main.
# 
# If you don't want to delete the override file, use the following to keep it:
#    ./imageup -k

# Determine the script's directory dynamically
SCRIPT_DIR="$(dirname "$(realpath "$0")")"

# Load environment variables from imageup.env
ENV_FILE="$SCRIPT_DIR/../config/imageup.env"
if [ -f "$ENV_FILE" ]; then
  export $(grep -v '^#' "$ENV_FILE" | xargs)
else
  echo "Error: Environment file not found at $ENV_FILE" >&2
  exit 1
fi

# Determine environment based on hostname
HOSTNAME="$(hostname)"
if [[ "$HOSTNAME" == "$TEST_HOSTNAME" ]]; then
  ENVIRONMENT="test"
  COMPOSE_ENV_FILE="/var/docker/image/IMAGE-server/test.env"
elif [[ "$HOSTNAME" == "$PROD_HOSTNAME" ]]; then
  ENVIRONMENT="production"
  COMPOSE_ENV_FILE="/var/docker/image/IMAGE-server/production.env"
else
  echo "Unknown host: $HOSTNAME. Expected TEST_HOSTNAME=$TEST_HOSTNAME or PROD_HOSTNAME=$PROD_HOSTNAME from imageup.env"
  exit 1
fi

delete_override=true  # default to deleting override file

# get command line arguments
#  https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash/21128172
while getopts 'k' flag; do
  case "${flag}" in
    k) delete_override='false' ;;
  esac
done

set -o errexit # halt script if anything returns error
if [ "$delete_override" = true ]; then
  rm -f "$DOCKER_DIR/docker-compose.override.yml"
else
  echo "DANGER! Not deleting override file!"
fi
touch "$DOCKER_DIR/docker-compose.override.yml"

cd "$IMAGE_SERVER_DIR"

# different users will be working inside the server directory, so git becomes angry. Mark it as safe to do this.
# To prevent duplicate entries, check if the directories are already listed as "safe" before adding them.
# https://medium.com/@thecodinganalyst/git-detect-dubious-ownership-in-repository-e7f33037a8f
if ! git config --global --get-all safe.directory | grep -q "$IMAGE_SERVER_DIR"; then
    git config --global --add safe.directory "$IMAGE_SERVER_DIR"
    echo "Added $IMAGE_SERVER_DIR to safe"
fi

if ! git config --global --get-all safe.directory | grep -q "$IMAGE_SERVER_DIR/schemas"; then
    git config --global --add safe.directory "$IMAGE_SERVER_DIR/schemas"
    echo "Added $IMAGE_SERVER_DIR/schemas to safe"
fi

# git remote URL -- HTTPS (instead of SSH)
git remote set-url origin "$GIT_REMOTE"

# Even though we pull already built docker images, keep the repo up to date
# and sync up to any config directory changes.
git checkout main
# reset --hard and pull to make sure that we have a clean version of what is in main
git fetch origin
git reset --hard origin/main
git pull
git submodule update --init

# Pull the latest built images
docker compose --env-file "$COMPOSE_ENV_FILE" pull

# Stop everything, including any containers on the image network that
# weren't started with docker-compose
cd "$DOCKER_DIR"

echo "about to docker compose down..."
docker compose --env-file "$COMPOSE_ENV_FILE" down

echo "about to stop all containers on image network..."
IMAGECONTAINERS=$(docker ps -q -f "network=image")
if [[ ${IMAGECONTAINERS} ]]; then
    docker stop $IMAGECONTAINERS
    docker container rm $IMAGECONTAINERS
fi

echo "about to find all containers with \"image\" in name, e.g., monarch link app and TAT"
# https://github.com/Shared-Reality-Lab/IMAGE-server/issues/987
IMAGECONTAINERS=$(docker container ls -q --filter name=image)
if [[ ${IMAGECONTAINERS} ]]; then
    docker stop $IMAGECONTAINERS
    docker container rm $IMAGECONTAINERS
fi

# get rid of the image network so that if someone manually creates it, we get it back via compose
echo "about to remove image network"
docker network rm -f image || true

# Bring all the containers back up
docker compose --env-file "$COMPOSE_ENV_FILE" up -d --force-recreate

cd -