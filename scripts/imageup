#!/bin/bash -x

# Resets IMAGE docker stack completely.
# Use this to get yourself out of trouble if you're testing and mess anything up.
# Also run every night on test server via cron to make sure latest is pulled and
# server is in a known state.
# removes any docker-compose overrides, and pulls images from scratch so that
# what is running reflects what is merged into main.
# 
# If you don't want to delete the override file, use the following to keep it:
#    ./imageup -k

# Determine the script's directory dynamically
SCRIPT_DIR="$(dirname "$(realpath "$0")")"

# Load environment variables from imageup.env
ENV_FILE="$SCRIPT_DIR/../config/imageup.env"
if [ -f "$ENV_FILE" ]; then
  export $(grep -v '^#' "$ENV_FILE" | xargs)
else
  echo "Error: Environment file not found at $ENV_FILE" >&2
  exit 1
fi

delete_override=true  # default to deleting override file

# get command line arguments
#  https://stackoverflow.com/questions/7069682/how-to-get-arguments-with-flags-in-bash/21128172
while getopts 'k' flag; do
  case "${flag}" in
    k) delete_override='false' ;;
  esac
done

set -o errexit # halt script if anything returns error

# detects if running on Unicorn or Pegasus and sets the correct image tag
HOSTNAME=$(hostname)
if [[ "$HOSTNAME" == *"unicorn"* ]]; then
  SERVER_ENV="Unicorn"
  REGISTRY_TAG="unstable"
elif [[ "$HOSTNAME" == *"pegasus"* ]]; then
  SERVER_ENV="Pegasus"
  REGISTRY_TAG="latest"
else
  echo "Error: Unable to determine the correct server environment (Unicorn or Pegasus)." >&2
  exit 1
fi

export SERVER_ENV REGISTRY_TAG

echo "[INFO] Running on $SERVER_ENV with REGISTRY_TAG=$REGISTRY_TAG"

if [ "$delete_override" = true ]; then
  rm -f "$DOCKER_DIR/docker-compose.override.yml"
else
  echo "DANGER! Not deleting override file!"
fi
touch "$DOCKER_DIR/docker-compose.override.yml"

cd "$IMAGE_SERVER_DIR"

# Check if there are any safe directories before unsetting
if git config --global --get-all safe.directory; then
    echo "Unsetting all safe directories"
    git config --global --unset-all safe.directory
    echo "Exit code for unset: $?"
else
    echo "No safe directories to unset"
fi

# different users will be working inside the server directory, so git becomes angry. Mark it as safe to do this.
# To prevent duplicate entries, check if the directories are already listed as "safe" before adding them.
# https://medium.com/@thecodinganalyst/git-detect-dubious-ownership-in-repository-e7f33037a8f
if ! git config --global --get-all safe.directory | grep -q "$IMAGE_SERVER_DIR"; then
    git config --global --add safe.directory "$IMAGE_SERVER_DIR"
    echo "Added $IMAGE_SERVER_DIR to safe"
fi

if ! git config --global --get-all safe.directory | grep -q "$IMAGE_SERVER_DIR/schemas"; then
    git config --global --add safe.directory "$IMAGE_SERVER_DIR/schemas"
    echo "Added $IMAGE_SERVER_DIR/schemas to safe"
fi

# git remote URL -- HTTPS (instead of SSH)
git remote set-url origin "$GIT_REMOTE"

# Even though we pull already built docker images, keep the repo up to date
# and sync up to any config directory changes.
git checkout main
# `could git reset --hard` here, but should probably just error out and let user deal with it
git pull
git submodule update --init

# Pull the latest built images
docker compose pull

# Stop everything, including any containers on the image network that
# weren't started with docker-compose
cd "$DOCKER_DIR"

echo "[INFO] about to docker compose down..."
docker compose down

echo "[INFO] about to stop all containers on image network..."
IMAGECONTAINERS=$(docker ps -q -f "network=image")
if [[ ${IMAGECONTAINERS} ]]; then
    echo "[INFO] Stopping rogue containers..."
    docker stop $IMAGECONTAINERS
    docker container rm $IMAGECONTAINERS
fi

# get rid of the image network so that if someone manually creates it, we get it back via compose
echo "[INFO] about to remove image network"
docker network rm -f image || true  # Ignore error if network does not exist

# Bring all the containers back up
echo "[INFO] Bringing up the IMAGE stack with docker-compose..."
docker compose up -d --force-recreate

echo "[SUCCESS] IMAGE stack has been reset and is running with REGISTRY_TAG=$REGISTRY_TAG"

cd -
