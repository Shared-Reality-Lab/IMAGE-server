/*
 * Copyright (c) 2021 IMAGE Project, Shared Reality Lab, McGill University
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * and our Additional Terms along with this program.
 * If not, see <https://github.com/Shared-Reality-Lab/IMAGE-server/blob/main/LICENSE>.
 */
import express from "express";
import sharp from "sharp";
import Ajv from "ajv";

import querySchemaJSON from "./schemas/request.schema.json";
import handlerResponseSchemaJSON from "./schemas/handler-response.schema.json";
import definitionsJSON from "./schemas/definitions.json";
import textSchemaJSON from "./schemas/renderers/text.schema.json";

const app = express();
const port = 80;
const ajv = new Ajv({
    "schemas": [querySchemaJSON, definitionsJSON, handlerResponseSchemaJSON, textSchemaJSON]
});

async function extractDimensions(dataUrl: string) {
    const imageBuffer = Buffer.from(dataUrl.split(",")[1], "base64");
    const metadata = await sharp(imageBuffer).metadata();
    return [metadata.width as number, metadata.height as number];
}

function generateRendering(width: number, height: number) {
    return {
        "type_id": "ca.mcgill.a11y.image.renderer.Text",
        "confidence": 100,
        "description": "An example rendering that conveys no useful information.",
        "metadata": {
            "description": "This was generated by the \"hello handler\" container, an example of how to structure a handler. It is not meant to be used in production."
        },
        "data": {
            "text": `The image received is ${width} pixels by ${height} pixels.`
        }
    };
}

app.use(express.json({ limit: process.env.MAX_BODY }));

app.post("/handler", async (req, res) => {
    console.debug("Received request");
    if (ajv.validate("https://image.a11y.mcgill.ca/request.schema.json", req.body)) {
        console.log("Request validated");
        if (!req.body.graphic) {
            console.log("Not an image request! Skipping...");
            res.status(204);
            return;
        }
        // Check for text rendering support
        const renderers = req.body.renderers as string[];
        const rendering = [];
        if (renderers.includes("ca.mcgill.a11y.image.renderer.Text")) {
            const dims = await extractDimensions(req.body.graphic);
            const r: Record<string, unknown> = generateRendering(dims[0], dims[1]);
            if (ajv.validate("https://image.a11y.mcgill.ca/renderers/text.schema.json", r["data"])) {
                rendering.push(r);
            } else {
                console.error("Failed to generate a valid text rendering!");
                res.status(500).json(ajv.errors);
                return;
            }
        } else {
            console.warn("Text renderer not supported by the client!");
        }
        const response = {
            "request_uuid": req.body.request_uuid,
            "timestamp": Math.round(Date.now() / 1000),
            "renderings": rendering
        };
        if (ajv.validate("https://image.a11y.mcgill.ca/handler-response.schema.json", response)) {
            console.log("Valid response generated.");
            res.json(response);
        } else {
            console.log("Failed to generate a valid response (did the schema change?)");
            res.status(500).json(ajv.errors);
        }
    } else {
        console.log("Request did not pass the schema.");
        res.status(400).send(ajv.errors);
    }
});

app.listen(port, () => {
    console.log(`Started server on port ${port}`);
});
