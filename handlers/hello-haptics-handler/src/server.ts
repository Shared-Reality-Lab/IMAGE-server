import express from "express";
import Ajv from "ajv";
import * as utils from "./utils";
import querySchemaJSON from "./schemas/request.schema.json";
import helloHapticsSchemaJSON from "./schemas/simplehaptics.schema.json"
import handlerResponseSchemaJSON from "./schemas/handler-response.schema.json";
import definitionsJSON from "./schemas/definitions.json";
const app = express();
const port = 80;
const ajv = new Ajv({
	"schemas": [querySchemaJSON, definitionsJSON, helloHapticsSchemaJSON, handlerResponseSchemaJSON]
});
// async function extractDimensions(dataUrl: string) {
//     const imageBuffer = Buffer.from(dataUrl.split(",")[1], "base64");
//     const metadata = await sharp(imageBuffer).metadata();
//     return [metadata.width as number, metadata.height as number];
// }
// async function extractBoundingBox(dataUrl:string){
//     return []; //return array of boundingboxes
// }
// function calcConfidence(objects: Record<string, unknown>[]): number {
//     let confidence = objects.reduce((acc, cur) => {
//         acc += cur["confidence"] as number;
//         return acc;
//     }, 0);
//     confidence /= objects.length;
//     return confidence;
// }
function generateRendering(objectText: string[], objectCentroids: number[], objectCoords: number[], image: string[]): object {
	return {
		"type_id": "ca.mcgill.a11y.image.renderer.simpleHaptics",
		"confidence": 100, //calcConfidence(objectData["objects"]),
		"description": "Bounding box and centroid for haptic round trip example.",
		"metadata": {
			"description": "This was generated by the \"hello haptics handler\" container, to test a roundtrip for haptic renderings. It is not meant to be used in production."
		},
		"data": {
			"text": objectText,
			"centroids": objectCentroids,
			"coords": objectCoords,
			"image": image
		}
	}
}

app.use(express.json({
	limit: process.env.MAX_BODY
}));
app.post("/handler", async (req, res) => {
	// Validate the request data (just in case)
	if(!ajv.validate("https://image.a11y.mcgill.ca/request.schema.json", req.body)) {
		console.warn("Request did not pass the schema!");
		res.status(400).json(ajv.errors);
		return;
	}

	// Check for required preprocessor data
	const preprocessors = req.body["preprocessors"];
	if(!preprocessors["ca.mcgill.a11y.image.preprocessor.objectDetection"]) {
		console.warn("No object detection  data: can't render!");
		const response = utils.generateEmptyResponse(req.body["request_uuid"]);

		if(ajv.validate("https://image.a11y.mcgill.ca/handler-response.schema.json", response)) {
			res.json(response);
		} else {
			console.error("Failed to generate a valid empty response!");
			console.error(ajv.errors);
			res.status(500).json(ajv.errors);
		}
		return;
	}

	// Check for a usable renderer
	// const hasHaply = req.body["renderers"].includes("ca.mcgill.a11y.image.renderer.simpleHaptics");
	// if(!hasHaply) {
	// 	console.warn("Simple Haply renderer not supported!");
	// 	const response = utils.generateEmptyResponse(req.body["request_uuid"]);
	// 	if(ajv.validate("https://image.a11y.mcgill.ca/handler-response.schema.json", response)) {
	// 		res.json(response);
	// 	} else {
	// 		console.error("Failed to generate a valid empty response!");
	// 		console.error(ajv.errors);
	// 		res.status(500).json(ajv.errors);
	// 	}
	// 	return;
	// }

	// Going ahead with SimpleHaptics
	const objects = preprocessors["ca.mcgill.a11y.image.preprocessor.objectDetection"]["objects"];
	if(objects.length === 0) {
		console.warn("No segments were detected, so we can't do anything!");
		const response = utils.generateEmptyResponse(req.body["request_uuid"]);
		res.json(response);
		return;
	}

	//type centroid = [number, number];
	const objectCentroids: number[] = [];
	const objectCoords: number[] = [];
	const objectText: string[] = [];
	for(let i = 0; i < objects.length; i++) {
		objectCentroids.push(objects[i]["centroid"]);
		objectText.push(objects[i]["type"])
		objectCoords.push(objects[i]["dimensions"])
	}

	const image = req.body.image;

	const rendering = [];
	rendering.push(generateRendering(objectText, objectCentroids, objectCoords, image));

	// if(!ajv.validate(helloHapticsSchemaJSON, rendering)) {
	// 	console.error("Invalid JSON detected");
	// 	console.error(ajv.errors);
	// 	const response = utils.generateEmptyResponse(req.body["request_uuid"]);
	// 	res.json(response);
	// 	return;
	// }

	const response = {
		"request_uuid": req.body.request_uuid,
		"timestamp": Math.round(Date.now() / 1000),
		"renderings": rendering
	};

	//res.json(response);
	//"./schemas/request.schema.json"
	if(ajv.validate("https://image.a11y.mcgill.ca/handler-response.schema.json", response)) {
		res.json(response);
	} else {
		res.json(ajv.errors);
		console.error("Failed to generate a valid response.");
		console.error(ajv.errors);
		res.status(500).json(ajv.errors);
	}
});
app.listen(port, () => {
	console.log(`Started server on port ${port}`);
});